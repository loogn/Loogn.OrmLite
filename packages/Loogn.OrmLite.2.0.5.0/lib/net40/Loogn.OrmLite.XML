<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Loogn.OrmLite</name>
    </assembly>
    <members>
        <member name="T:Loogn.OrmLite.OrmLiteReadApi">
            <summary>
            读操作API
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回DataReader
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectOriginal``1(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回实体列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectMutipleResult(System.Data.IDbConnection,Loogn.OrmLite.MutipleCmd[])">
            <summary>
            执行命令，返回多个结果集，返回对象用using释放，Fetch结果的时候最好不要做其他逻辑
            </summary>
            <param name="dbConn"></param>
            <param name="cmds"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectOriginal(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回动态列表
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleOriginal``1(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回实体对象，查不到返回null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleOriginal(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回动态对象，查不到返回null
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ScalarOriginal``1(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回首行首列数据
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ColumnOriginal``1(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回首列数据
            </summary>
            <typeparam name="TField">首列数据类型</typeparam>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ColumnDistinctOriginal``1(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回首列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.LookupOriginal``2(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回由第一列聚合第二列的字典
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.DictionaryOriginal``2(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回由第一列映射第二列的字典
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.CountOriginal(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回首行首列的数字
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection)">
            <summary>
            查询所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据sql语句查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Select(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询数据
            </summary>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Select(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询数据
            </summary>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Select(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据sql语句查询数据
            </summary>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectWhere``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据指定字段查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="name">条件字段名</param>
            <param name="value">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectWhere``1(System.Data.IDbConnection,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据指定字段查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="conditions">字段字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectWhere``1(System.Data.IDbConnection,System.Object)">
            <summary>
            根据条件匿名对象查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="conditions">条件匿名字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据格式化sql语句查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sqlFormat">格式化sql语句</param>
            <param name="parameters">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectFmt(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据格式化sql语句查询数据
            </summary>
            <param name="dbConn"></param>
            <param name="sqlFormat">格式化sql语句</param>
            <param name="parameters">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            根据字段集合查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="idValues">字段值集合</param>
            <param name="idField">字段名称，默认是ID</param>
            <param name="selectFields">要查询的字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectPage``1(System.Data.IDbConnection,Loogn.OrmLite.OrmLitePageFactor,System.Int64@)">
            <summary>
            查询分页数据，返回数据列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="factor">分页因子,TableName可选</param>
            <param name="totalCount">输出参数，总条数</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectPage(System.Data.IDbConnection,Loogn.OrmLite.OrmLitePageFactor,System.Int64@)">
            <summary>
            查询分页数据，返回数据列表
            </summary>
            <param name="dbConn"></param>
            <param name="factor">分页因子，TableName必填</param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectPage``1(System.Data.IDbConnection,Loogn.OrmLite.OrmLitePageFactor)">
            <summary>
            查询分页数据，返回分页结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">分页因子，TableName可选</param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectPage(System.Data.IDbConnection,Loogn.OrmLite.OrmLitePageFactor)">
            <summary>
            查询分页数据，返回分页结果
            </summary>
            <param name="dbConn"></param>
            <param name="factor">分页因子，TableName必填</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Single(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询单条数据
            </summary>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Single(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询单条数据
            </summary>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Single(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据sql语句查询单条数据
            </summary>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据格式化sql语句查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sqlFormat">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleFmt(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据格式化sql语句查询单条数据
            </summary>
            <param name="dbConn"></param>
            <param name="sqlFormat">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleById``1(System.Data.IDbConnection,System.Object,System.String)">
            <summary>
            根据指定字段查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="idValue">字段值</param>
            <param name="idField">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleWhere``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据指定字段查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="name">字段名</param>
            <param name="value">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleWhere``1(System.Data.IDbConnection,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据指定字段查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="conditions">字段字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SingleWhere``1(System.Data.IDbConnection,System.Object)">
            <summary>
            根据指定字段查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="conditions">字段匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询首行首列
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询首行首列
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据sql语句查询首行首列
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ScalarFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据sql语句查询首行首列
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dbConn"></param>
            <param name="sqlFormat">格式化sql语句</param>
            <param name="parameters">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.MaxID``1(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            得到表中某列的最大值
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dbConn"></param>
            <param name="tableName">表名</param>
            <param name="field">列名</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询一列数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询一列数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据sql语句查询一列数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ColumnFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据格式化sql语句查询一列数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sqlFormat">格式化sql语句</param>
            <param name="parameters">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询一列去重数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询一列去重数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据sql语句查询一列去重数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.ColumnDistinctFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据sql语句查询一列去重数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="dbConn"></param>
            <param name="sqlFormat"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String)">
            <summary>
            查询两列数据，第一列作为Key，聚合第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            查询两列数据，第一列作为Key，聚合第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            查询两列数据，第一列作为Key，聚合第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.LookupFmt``2(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            查询两列数据，第一列作为Key，聚合第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sqlFormat"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,System.String)">
            <summary>
            查询两列数据，第一列作为Key，第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            查询两列数据，第一列作为Key，第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            查询两列数据，第一列作为Key，第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.DictionaryFmt``2(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            查询两列数据，第一列作为Key，第二列作为Value
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn"></param>
            <param name="sqlFormat"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Count``1(System.Data.IDbConnection)">
            <summary>
            查询总条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Count``1(System.Data.IDbConnection,System.String)">
            <summary>
            根据sql语句查询条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Count``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句查询条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.Count``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据sql语句查询条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.CountWhere``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据单个字段作为条件查询条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.CountWhere``1(System.Data.IDbConnection,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据字段作为条件查询条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.CountWhere``1(System.Data.IDbConnection,System.Object)">
            <summary>
            根据字段作为条件查询条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.CountFmt(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            根据sql语句查询条数
            </summary>
            <param name="dbConn"></param>
            <param name="sqlFormat"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectTableMetaData(System.Data.IDbConnection,System.Boolean)">
            <summary>
            查询指定数据库表的元数据
            </summary>
            <param name="dbConn"></param>
            <param name="includeColumns"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteReadApi.SelectColumnMetaData(System.Data.IDbConnection,System.String)">
            <summary>
            查询指定表的列元数据
            </summary>
            <param name="dbConn"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.OrmLiteWriteApi">
            <summary>
            写操作API
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.EnsureOpen(System.Data.IDbConnection)">
            <summary>
            确保打开数据库连接
            </summary>
            <param name="dbConn"></param>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Proc(System.Data.IDbConnection,System.String,System.Object,System.Boolean)">
            <summary>
            调用存储过程
            </summary>
            <param name="dbConn"></param>
            <param name="name">存储过程名称</param>
            <param name="inParams">输入参数</param>
            <param name="execute">是否立即执行</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令,返回影响行数
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行命令,返回影响行数
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="parameters">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回首行首列
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行命令，返回首行首列
            </summary>
            <param name="dbConn"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="parameters">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
            插入实体，返回影响行数或自增列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="obj"></param>
            <param name="selectIdentity">是否返回自增列</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Insert(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            插入数据
            </summary>
            <param name="dbConn"></param>
            <param name="table">表名</param>
            <param name="fields">字段字典</param>
            <param name="selectIdentity">是否返回自增列</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Insert(System.Data.IDbConnection,System.String,System.Object,System.Boolean)">
            <summary>
            插入数据
            </summary>
            <param name="dbConn"></param>
            <param name="table">表名</param>
            <param name="anonType">字典匿名对象</param>
            <param name="selectIdentity">是否返回自增列</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.InsertAll(System.Data.IDbConnection,System.String,System.Collections.IEnumerable)">
            <summary>
            批量插入数据
            </summary>
            <param name="dbConn"></param>
            <param name="table"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0,System.String[])">
            <summary>
            根据主键修改字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="obj"></param>
            <param name="updateFields">要修改的字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateAnonymous(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            根据ID修改匿名对象
            </summary>
            <param name="dbConn"></param>
            <param name="tableName">表名</param>
            <param name="anonymous">匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateAnonymous``1(System.Data.IDbConnection,System.Object)">
            <summary>
            根据主键修改匿名对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="anonymous">匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            根据主键批量修改数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="objs">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据条件修改数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="conditions">条件语句</param>
            <param name="parameters">参数字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Update(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据条件修改数据
            </summary>
            <param name="dbConn"></param>
            <param name="tableName">表名</param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="conditions">条件语句</param>
            <param name="parameters">参数字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateById(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.String)">
            <summary>
            根据单个字段修数据
            </summary>
            <param name="dbConn"></param>
            <param name="tableName">表名</param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="id">条件字段值</param>
            <param name="idname">条件字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateById``1(System.Data.IDbConnection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.String)">
            <summary>
            根据单个字段修改数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="id">条件字段值</param>
            <param name="idname">条件字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateFieldById``1(System.Data.IDbConnection,System.String,System.Object,System.Object,System.String)">
            <summary>
            根据一个字段修改另一个字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="fieldName">被修改的字段名</param>
            <param name="fieldValue">被修改的字段值</param>
            <param name="id">条件字段值</param>
            <param name="idname">条件字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Delete(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句删除数据
            </summary>
            <param name="dbConn"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object,System.String)">
            <summary>
            根据字段删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="id">字段值</param>
            <param name="idField">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.DeleteByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.String)">
            <summary>
            根据字段集合删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <param name="idValues">字段值集合</param>
            <param name="idFields">字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection)">
            <summary>
            删除所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Proc(System.Data.IDbTransaction,System.String,System.Object,System.Boolean)">
            <summary>
            调用存储过程
            </summary>
            <param name="dbTrans"></param>
            <param name="name">存储过程名称</param>
            <param name="inParams">输入参数</param>
            <param name="excludeDefaults">是否立即执行</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令,返回影响行数
            </summary>
            <param name="dbTrans"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行命令,返回影响行数
            </summary>
            <param name="dbTrans"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="parameters">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令，返回首行首列
            </summary>
            <param name="dbTrans"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="ps">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行命令，返回首行首列
            </summary>
            <param name="dbTrans"></param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="parameters">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbTransaction,``0,System.Boolean)">
            <summary>
            插入实体，返回影响行数或自增列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="obj"></param>
            <param name="selectIdentity">是否返回自增列</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Insert(System.Data.IDbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            插入数据
            </summary>
            <param name="dbTrans"></param>
            <param name="table">表名</param>
            <param name="fields">字段字典</param>
            <param name="selectIdentity">是否返回自增列</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Insert(System.Data.IDbTransaction,System.String,System.Object,System.Boolean)">
            <summary>
            插入数据
            </summary>
            <param name="dbTrans"></param>
            <param name="table">表名</param>
            <param name="anonType">字典匿名对象</param>
            <param name="selectIdentity">是否返回自增列</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.InsertAll(System.Data.IDbTransaction,System.String,System.Collections.IEnumerable)">
            <summary>
            批量插入数据
            </summary>
            <param name="dbTrans"></param>
            <param name="table"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.InsertAll``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbTransaction,``0,System.String[])">
            <summary>
            根据主键修改字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="obj"></param>
            <param name="updateFields">要修改的字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateAnonymous(System.Data.IDbTransaction,System.String,System.Object)">
            <summary>
            根据ID修改匿名对象
            </summary>
            <param name="dbTrans"></param>
            <param name="tableName">表名</param>
            <param name="anonymous">匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateAnonymous``1(System.Data.IDbTransaction,System.Object)">
            <summary>
            根据主键修改匿名对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="anonymous">匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateAll``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            根据主键批量修改数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="objs">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbTransaction,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据条件修改数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="conditions">条件语句</param>
            <param name="parameters">参数字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Update(System.Data.IDbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据条件修改数据
            </summary>
            <param name="dbTrans"></param>
            <param name="tableName">表名</param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="conditions">条件语句</param>
            <param name="parameters">参数字段</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateById(System.Data.IDbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.String)">
            <summary>
            根据单个字段修数据
            </summary>
            <param name="dbTrans"></param>
            <param name="tableName">表名</param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="id">条件字段值</param>
            <param name="idname">条件字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateById``1(System.Data.IDbTransaction,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.String)">
            <summary>
            根据单个字段修改数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="updateFields">被修改的字段字典</param>
            <param name="id">条件字段值</param>
            <param name="idname">条件字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.UpdateFieldById``1(System.Data.IDbTransaction,System.String,System.Object,System.Object,System.String)">
            <summary>
            根据一个字段修改另一个字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="fieldName">被修改的字段名</param>
            <param name="fieldValue">被修改的字段值</param>
            <param name="id">条件字段值</param>
            <param name="idname">条件字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Delete(System.Data.IDbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据sql语句删除数据
            </summary>
            <param name="dbTrans"></param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbTransaction,System.Object,System.String)">
            <summary>
            根据字段删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="id">字段值</param>
            <param name="idField">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.DeleteByIds``1(System.Data.IDbTransaction,System.Collections.IEnumerable,System.String)">
            <summary>
            根据字段集合删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <param name="idValues">字段值集合</param>
            <param name="idFields">字段名，默认是ID</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbTransaction)">
            <summary>
            删除所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbTrans"></param>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.OrmLiteFieldAttribute">
            <summary>
            实体类特性，用户属性上，指明该属性是否自增，是否是主键，是否忽略等
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteFieldAttribute.#ctor">
            <summary>
            实体类特性
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLiteFieldAttribute.InsertRequire">
            <summary>
            为Ture时，ID列也会插入
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLiteFieldAttribute.InsertIgnore">
            <summary>
            为Ture时，整体插入时会忽略该字段，如自增
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLiteFieldAttribute.UpdateIgnore">
            <summary>
            为Ture时，整体修改时会忽略该字段，如较大的字段
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLiteFieldAttribute.IsPrimaryKey">
            <summary>
            为Ture时，说明该字段是主键，整体修改时用它作为修改条件
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLiteFieldAttribute.Ignore">
            <summary>
            为Ture时，说明该字段不对应表字段
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.OrmLiteTableAttribute">
            <summary>
            实体类特性，用户类上，指明表名
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteTableAttribute.#ctor">
            <summary>
            实体类特性
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.OrmLiteTableAttribute.#ctor(System.String)">
            <summary>
            实体类特性
            </summary>
            <param name="name">数据库表名</param>
        </member>
        <member name="P:Loogn.OrmLite.OrmLiteTableAttribute.Name">
            <summary>
            指定表名
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.CommandDialectBaseProvider">
            <summary>
            命令方言基类
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.CommandDialectBaseProvider.GetTableName``1">
            <summary>
            获取报名
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.CommandDialectBaseProvider.DealDefaultValue(System.Object,System.Type)">
            <summary>
            处理默认值，string datetime
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="P:Loogn.OrmLite.CommandDialectBaseProvider.CloseQuote">
            <summary>
            左引号
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.CommandDialectBaseProvider.IsNullFunc">
            <summary>
            判断是否为null的函数
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.CommandDialectBaseProvider.OpenQuote">
            <summary>
            右引号
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.CommandDialectBaseProvider.ColumnMetaData(System.String,System.String)">
            <summary>
            获取列元数据
            </summary>
            <param name="dbName"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.CommandDialectBaseProvider.Count``1">
            <summary>
            获取Count命令
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.ICommandDialectProvider">
            <summary>
            命令方言接口
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.CreateConnection">
            <summary>
            创建连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Loogn.OrmLite.ICommandDialectProvider.OpenQuote">
            <summary>
            左引号
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.ICommandDialectProvider.CloseQuote">
            <summary>
            右引号
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.ICommandDialectProvider.IsNullFunc">
            <summary>
            判断null函数
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.GetLastInsertId">
            <summary>
            获取自增列语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.Select``1">
            <summary>
            查询语句
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.FullSelect``1(System.String)">
            <summary>
            查询语句，自动填充Select * from table where
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlOrCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.FullCount``1(System.String)">
            <summary>
             查询语句，自动填充Select * from table where
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlOrCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SelectWhere``1(System.String,System.Object)">
            <summary>
            根据单字段查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SelectWhere``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据字典条件查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SelectWhere``1(System.Object)">
             <summary>
            根据对象条件查询
             </summary>
             <typeparam name="T"></typeparam>
             <param name="conditions"></param>
             <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SelectByIds``1(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            根据编号查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idValues"></param>
            <param name="idField"></param>
            <param name="selectFields"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.FullSingle``1(System.String)">
            <summary>
            根据语句查询，必要时填充
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlOrCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SingleById``1(System.Object,System.String)">
            <summary>
            根据编号查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idValue"></param>
            <param name="idField"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SingleWhere``1(System.String,System.Object)">
            <summary>
            根据字段查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SingleWhere``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据字典条件查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.SingleWhere``1(System.Object)">
            <summary>
            根据对象条件查询单条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.Count``1">
            <summary>
            查询数量
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.CountWhere``1(System.String,System.Object)">
            <summary>
            根据字段查询数量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.CountWhere``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据字典条件查询数量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.ICommandDialectProvider.CountWhere``1(System.Object)">
            <summary>
            根据对象条件查询数量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.CommandInfo">
            <summary>
            表示一个SQL命令
            </summary>
        </member>
        <member name="F:Loogn.OrmLite.CommandInfo.CommandText">
            <summary>
            命令文本
            </summary>
        </member>
        <member name="F:Loogn.OrmLite.CommandInfo.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Loogn.OrmLite.CommandInfo.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.DictBuilder">
            <summary>
            链式字典生成器
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.DictBuilder.Assign(System.String,System.Object)">
            <summary>
            新生成链式，并添加提供的键值
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.DictBuilder.New">
            <summary>
            生成链式字典
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.ChainOperateDict">
            <summary>
            链式字典，继承自Dictionary 
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.ChainOperateDict.Assign(System.String,System.Object)">
            <summary>
            往字典里赋值
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.MutipleResult">
            <summary>
            查询多个结果集时，返回此类型的对象，客户端手动Fetch
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.MutipleResult.FetchList``1">
            <summary>
            从DataReader获取多行数据，填充为TModel集合返回
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.MutipleResult.FetchObject``1">
            <summary>
            从DataReader获取一行数据，填充为TModel返回
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.MutipleResult.FetchScalar``1">
            <summary>
            从DataReader获取首行首列的值
            </summary>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.MutipleCmd">
            <summary>
            查询多个结果的sql命令信息
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MutipleCmd.CmdText">
            <summary>
            sql语句
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.OrmLitePageFactor">
            <summary>
            分页查询参数类
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageFactor.Conditions">
            <summary>
            条件，可带参数
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageFactor.TableName">
            <summary>
            表名，可选
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageFactor.Fields">
            <summary>
            查询字段，可选，默认为*
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageFactor.OrderBy">
            <summary>
            排序语句，必须
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageFactor.Params">
            <summary>
            参数集，匿名对象 或 Dictionary[string, object]
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageFactor.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageFactor.PageSize">
            <summary>
            每页大小
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.OrmLitePageResult`1">
            <summary>
            分页数据信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageResult`1.TotalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageResult`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageResult`1.PageSize">
            <summary>
            每页条数
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageResult`1.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLitePageResult`1.List">
            <summary>
            分页数据
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.MetaData.ColumnMetaData">
            <summary>
            数据列元数据
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.ColumnMetaData.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.ColumnMetaData.IsNullable">
            <summary>
            是否可为空
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.ColumnMetaData.IsIdentity">
            <summary>
            是否是标识列（自增）
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.ColumnMetaData.IsPrimaryKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.ColumnMetaData.SqlDataType">
            <summary>
            sql数据类型
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.ColumnMetaData.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.MetaData.ColumnMetaData.GetDataType">
            <summary>
            返回csharp类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.MetaData.MetaDataHelper.AppendDataTypeMap(System.String,System.String)">
            <summary>
            添加数据库类型到csharp类型的映射
            </summary>
            <param name="sqlDataType"></param>
            <param name="dataType"></param>
        </member>
        <member name="T:Loogn.OrmLite.MetaData.TableMetaData">
            <summary>
            数据表元数据
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.TableMetaData.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.TableMetaData.Description">
            <summary>
            表描述
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.MetaData.TableMetaData.Columns">
            <summary>
            列元数据
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.OrmLite">
            <summary>
            OrmLite
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.OrmLite.RegisterProvider(Loogn.OrmLite.ICommandDialectProvider)">
            <summary>
            注册命令方言提供程序
            </summary>
            <param name="provider"></param>
        </member>
        <member name="F:Loogn.OrmLite.OrmLite.KeyName">
            <summary>
            默认主键
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLite.DefaultKeyName">
            <summary>
            设置默认主键
            </summary>
        </member>
        <member name="P:Loogn.OrmLite.OrmLite.UpdateIgnoreFields">
            <summary>
            整体修改时，默认忽略修改的字段集合，集合里默认有AddDate,AddTime
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.DynamicMethodHelper.BuildConstructorInvoker(System.Reflection.ConstructorInfo)">
            <summary>
            实例化对象 用EMIT
            </summary>
            <typeparam name="T"></typeparam>
            <param name="constructor"></param>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.TransformForDataReader">
            <summary>
            ORM映射类，从reader到模型
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToObject``1(System.Data.IDataReader)">
            <summary>
            用reader填充T类型的对象，并返回
            </summary>
            <typeparam name="T">类型参数</typeparam>
            <param name="reader">dataReader</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToScalar``1(System.Data.IDataReader)">
            <summary>
            取reader的首行首列
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToObjectList``1(System.Data.IDataReader)">
            <summary>
            用Reader填充T类型列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToColumnList``1(System.Data.IDataReader)">
            <summary>
            用只有一个列的Reader填充成一个列表
            </summary>
            <typeparam name="T">对应reader第一个列的类型</typeparam>
            <param name="reader">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToColumnSet``1(System.Data.IDataReader)">
            <summary>
            用只有一个列的reader填充成一个集合
            </summary>
            <typeparam name="T">对应reader第一个列的类型</typeparam>
            <param name="reader">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToDynamic(System.Data.IDataReader)">
            <summary>
            用Reader填充dynamic类型
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToDynamicList(System.Data.IDataReader)">
            <summary>
            用Reader填充dynamic列表
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToLookup``2(System.Data.IDataReader)">
            <summary>
            用reader的第一列做为key，把第二列聚合成列表
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.TransformForDataReader.ReaderToDictionary``2(System.Data.IDataReader)">
            <summary>
            用reader的第一列做为key，用第二列作为Key
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.AttachParameters(System.Data.IDbCommand,System.Data.IDbDataParameter[])">
            <summary>
            This method is used to attach array of MySqlParameters to a MySqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of MySqlParameters to be added to command</param>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.PrepareCommand(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The MySqlCommand to be prepared</param>
            <param name="connection">A valid MySqlConnection, on which to execute this command</param>
            <param name="transaction">A valid MySqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of MySqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a MySqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a MySqlCommand (that returns no resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="T:Loogn.OrmLite.SqlHelper.MySqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Loogn.OrmLite.SqlHelper.MySqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Loogn.OrmLite.SqlHelper.MySqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[],Loogn.OrmLite.SqlHelper.MySqlConnectionOwnership)">
            <summary>
            Create and prepare a MySqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid MySqlConnection, on which to execute this command</param>
            <param name="transaction">A valid MySqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of MySqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>MySqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Loogn.OrmLite.SqlHelper.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Loogn.OrmLite.SqlInjection">
            <summary>
            sql注入
            </summary>
        </member>
        <member name="M:Loogn.OrmLite.SqlInjection.Filter(System.String)">
            <summary>
            过滤单引号注入
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Loogn.OrmLite.SqlInjection.ReplaceForLike(System.String)">
            <summary>
            对于like操作，需要进行替换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Loogn.OrmLite.TypeCachedInfo">
            <summary>
            非泛型类型信息
            </summary>
        </member>
        <member name="T:Loogn.OrmLite.TypeCachedInfo`1">
            <summary>
            泛型类型信息
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
    </members>
</doc>
